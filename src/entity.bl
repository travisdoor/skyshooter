// Entity
EntityKind :: enum u8 {
    Player,
    Missile,
    Enemy
};

Entity :: struct {
    kind: EntityKind,
    id: s32,
    texture: *SDL_Texture,
    position: Vec2,
    size: Vec2,
    destroy_anim: *Animation,
    speed: Vec2,
    dir: Vec2,
    max_speed: f32,
    is_alive: bool,

    // virtual table
    f_update: *fn (*u8, f32),
    f_dtor: *fn (*u8),
    f_on_colide : *fn (*u8),
};

entity_init :: fn (self: *Entity,
                   game: *Game,
                   kind: EntityKind,
                   id: s32,
                   texture_id: TextureId,
                   position: *Vec2,
                   size: *Vec2,
                   max_speed: f32) {

    self.texture = texture_pool_get(texture_id);
    self.kind = kind;
    self.id = id;
    self.position = ^position;
    self.size = ^size;
    self.speed = {:Vec2: 0};
    self.dir = {:Vec2: 0};
    self.max_speed = max_speed;
    self.is_alive = true;

    self.f_dtor = null;
    self.f_update = null;
    self.f_on_colide = null;

    frames := {:iVec2: 8, 6};
    self.destroy_anim = anim_new(game, TextureId.Explosion, &frames);
};

entity_delete :: fn (self: *Entity) {
    anim_delete(self.destroy_anim);

    if self.f_dtor != null {
        self.f_dtor(cast(*u8) self);
    }
    
    free(cast(*u8) self);
};

entity_kill :: fn (self: *Entity) {
    self.is_alive = false;
    tmp := self.position;
    tmp.x -= self.size.x / 2.f;
    tmp.y -= self.size.y / 2.f;
    anim_play_on_position(self.destroy_anim, &tmp);
};

entity_render :: fn (self: *Entity, game: *Game) { 
    anim_render(self.destroy_anim, game);

    if !self.is_alive { return; }     

    dst_rect := {:SDL_Rect:
        cast(s32) self.position.x,
        cast(s32) self.position.y,
        cast(s32) self.size.x,
        cast(s32) self.size.y,
    };

    SDL_RenderCopy(game.renderer, self.texture, null, &dst_rect);
};

entity_update :: fn (self: *Entity, dt: f32) {
    anim_update(self.destroy_anim, dt);

    if !self.is_alive {
        return;
    }     

    if self.f_update != null {
        self.f_update(cast(*u8) self, dt);
    }

    self.position.x += self.speed.x * dt;
    self.position.y += self.speed.y * dt;
};

entity_does_colide :: fn (self: *Entity, other: *Entity) bool {
    leftA := self.position.x;
    rightA := self.position.x + self.size.x;
    topA := self.position.y;
    bottomA := self.position.y + self.size.y;

    leftB := other.position.x;
    rightB := other.position.x + other.size.x;
    topB := other.position.y;
    bottomB := other.position.y + other.size.y;

    if bottomA < topB { return false; }
    if topA > bottomB { return false; }
    if rightA < leftB { return false; }
    if leftA > rightB { return false; }

    return true;
};

entity_on_colide :: fn (self: *Entity) {
    entity_kill(self);

    if self.f_on_colide != null {
        self.f_on_colide(cast(*u8) self);
    }
};