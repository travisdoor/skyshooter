LEVEL_LAYER_SKY     :: 0;
LEVEL_LAYER_HILLS1  :: 1;
LEVEL_LAYER_CLOUDS1 :: 2;
LEVEL_LAYER_HILLS2  :: 3;
LEVEL_LAYER_CLOUDS2 :: 4;

Level :: struct {
     layers: [5]*LevelLayer,
     player: *Entity
};

LevelLayer :: struct {
    texture: *SDL_Texture,
    x_position: f32,
    x_speed: f32
};

level_new :: fn (game: *Game) *Level {
    self := cast(*Level) malloc(sizeof(Level));

    self.layers[LEVEL_LAYER_SKY] = level_layer_new(game, "data/sky.png", 0.f);
    self.layers[LEVEL_LAYER_HILLS1] = level_layer_new(game, "data/rocks_1.png", -0.6f);
    self.layers[LEVEL_LAYER_CLOUDS1] = level_layer_new(game, "data/clouds_2.png", -0.7f);
    self.layers[LEVEL_LAYER_HILLS2] = level_layer_new(game, "data/rocks_2.png", -0.8f);
    self.layers[LEVEL_LAYER_CLOUDS2] = level_layer_new(game, "data/clouds_1.png", -0.9f);

    // init player
    tmp := {:Vec2: 50.f, 200.f};
    self.player = entity_new(game, "data/player.png", &tmp);

    return self;
};

level_delete :: fn (self: *Level) {
    loop i := 0; i < self.layers.len; i += 1 {
        level_layer_delete(self.layers[i]);
    }

    entity_delete(self.player);
    free(cast(*u8) self);
};

level_render :: fn (self: *Level, game: *Game) {
    level_layer_render(self.layers[LEVEL_LAYER_SKY], game);
    level_layer_render(self.layers[LEVEL_LAYER_HILLS1], game);
    level_layer_render(self.layers[LEVEL_LAYER_CLOUDS1], game);
    level_layer_render(self.layers[LEVEL_LAYER_HILLS2], game);

    entity_render(self.player, game);

    level_layer_render(self.layers[LEVEL_LAYER_CLOUDS2], game);
};

level_update :: fn (self: *Level) {
    entity_update(self.player);

    loop i := 0; i < self.layers.len; i += 1 {
        level_layer_update(self.layers[i]);
    }
};

level_handle_input :: fn (self: *Level) {
    if SDL_KeyPressed(SDL_Scancode.A) {
        self.player.speed.x -= 0.2f;
    }

    if SDL_KeyPressed(SDL_Scancode.S) {
        self.player.speed.y += 0.2f;
    }

    if SDL_KeyPressed(SDL_Scancode.D) {
        self.player.speed.x += 0.2f;
    }

    if SDL_KeyPressed(SDL_Scancode.W) {
        self.player.speed.y -= 0.2f;
    }
};

level_layer_new :: fn (game: *Game, filename: string, x_speed: f32) *LevelLayer {
    self := cast(*LevelLayer) malloc(sizeof(LevelLayer)); 
    surface := load_surface(filename);
    self.texture = SDL_CreateTextureFromSurface(game.renderer, surface);
    SDL_FreeSurface(surface);

    self.x_position = 0.f;
    self.x_speed = x_speed;
    return self;
};

level_layer_delete :: fn (self: *LevelLayer) {
    SDL_DestroyTexture(self.texture);
    free(cast(*u8) self);
};

level_layer_render :: fn (self: *LevelLayer, game: *Game) {
    ipos := cast(s32) self.x_position;

    dst_rect := {:SDL_Rect:
        ipos,
        0,
        ScreenWidth,
        ScreenHeight
    };

    SDL_RenderCopy(game.renderer, self.texture, null, &dst_rect);

    dst_rect.x += ScreenWidth;
    SDL_RenderCopy(game.renderer, self.texture, null, &dst_rect);
};

level_layer_update :: fn (self: *LevelLayer) {
    self.x_position += self.x_speed;
    if self.x_position < -(cast(f32) ScreenWidth) { self.x_position = 0.f; }
};