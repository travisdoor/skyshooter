#load "std/core.bl"
#load "std/math.bl"
#load "sdl2/sdl2.bl"
#load "level.bl"
#load "common.bl"
#load "entity.bl"

ScreenWidth  :: 800;
ScreenHeight :: 600;
MsPerFrame   :: 16;

Game :: struct {
  window: *SDL_Window,
  renderer: *SDL_Renderer,
  will_quit: bool,

  level: *Level
};

main :: fn () s32 {
  game: Game;

  init(&game);
  game_loop(&game);
  terminate(&game);

  return 0;
};

init :: fn (game: *Game) {
  print("Initialize SDL.\n");

  if SDL_Init(SDL_INIT_VIDEO) != 0 {
    print("Unable to init SDL\n");
    abort();
  } else {
    print("SDL initialized.\n");
  }

  title := "Sky Shooter!!!";
  game.window = SDL_CreateWindow(
    title.ptr,
    100,
    100,
    ScreenWidth,
    ScreenHeight,
    SDL_WINDOW_SHOWN
  );

  if game.window == null {
    print("Cannot create window.\n");
    abort();
  }

  game.renderer = SDL_CreateRenderer(game.window, -1, SDL_RENDERER_ACCELERATED);
  if game.renderer == null {
    print("Cannot create renderer.\n");
    abort();
  }
  
  SDL_SetRenderDrawColor(game.renderer, 0, 0, 0, 255);
  game.will_quit = false;

  // init level
  game.level = level_new(game);
};

terminate :: fn (game: *Game) {
  level_delete(game.level);
  SDL_DestroyRenderer(game.renderer);
  SDL_DestroyWindow(game.window);
  SDL_Quit();
  print("Exiting.\n");
};

game_loop :: fn (game: *Game) {
  loop !game.will_quit {
    start := SDL_GetTicks(); 

    {
      handle_input(game);
      update(game);
      render(game);
    }
    
    current := SDL_GetTicks();
    if start + MsPerFrame > current {
      SDL_Delay(start + MsPerFrame - current);
    }
  }
};

handle_input :: fn(game: *Game) {
  event := {:SDL_Event: 0};

  level_handle_input(game.level);

  loop SDL_PollEvent(&event) != 0 {
    if event.type == SDL_QUIT {
      game.will_quit = true;  
    }
  }
};

render :: fn (game: *Game) {
  SDL_RenderClear(game.renderer);

  level_render(game.level, game);

  SDL_RenderPresent(game.renderer);
};

update :: fn (game: *Game) {
  level_update(game.level);
};